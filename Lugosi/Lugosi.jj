PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.ArrayList;

class ArvoreLugosi{
  Main main;
  ArrayList<Function> functions;

  ArvoreLugosi(Main main, ArrayList<Function> functions){
    this.main = main;
    this.functions = functions;
  }
}

class Main{
  ArrayList<Comando> comandos;
  ArrayList<VarDecl> varDecls;

  Main(ArrayList<VarDecl> varDecls, ArrayList<Comando> comandos){
    this.varDecls = varDecls;
    this.comandos = comandos;
  }
}

class VarDecl{
  String tipo;
  String tokenID;

  VarDecl(String tipo, String tokenID){
    this.tipo = tipo;
    this.tokenID = tokenID;
  }
}

class Comando{}

class Atrib extends Comando{

  String tokenID;
  Exp exp;
  
  Atrib (String tokenID, Exp exp)
  {
    this.tokenID=tokenID;
    this.exp=exp;
  }

  /*print()
  {
    //System.out.println(this.tokenID + " = " + this.exp);
  }*/
}

class ChamadaDeFuncao extends Comando{ 
  String tokenID;
  ListaExp listaExp;
  
  ChamadaDeFuncao (String tokenID, ListaExp listaExp)
  {
    this.tokenID=tokenID;
    this.listaExp=listaExp;
  }
}

class CondicionalIF extends Comando{
  Exp exp;
  ArrayList<Comando> comandosEscopoIF;

  CondicionalIF (Exp exp, ArrayList<Comando> comandosEscopoIF){
    this.exp = exp;
    this.comandosEscopoIF = comandosEscopoIF;
  }
}

class LacoWhile extends Comando{
  Exp exp;
  ArrayList<Comando> comandosEscopoWhile;

  LacoWhile (Exp exp, ArrayList<Comando> comandosEscopoWhile){
    this.exp = exp;
    this.comandosEscopoWhile = comandosEscopoWhile;
  }
}

class LacoDoWhile extends Comando{
  Exp exp;
  ArrayList<Comando> comandosEscopoDoWhile;

  LacoDoWhile (Exp exp, ArrayList<Comando> comandosEscopoDoWhile){
    this.exp = exp;
    this.comandosEscopoDoWhile = comandosEscopoDoWhile;
  }
}
 
class Return extends Comando{
  Exp exp;

  Return (Exp exp){
    this.exp = exp;
  }
}

class Print extends Comando{

   Exp exp;
   Print(Exp exp)
   {this.exp = exp;}
}

class Exp{}

class ListaExp extends Exp{
  ArrayList<Exp> listaExp;

  ListaExp (ArrayList<Exp> listaExp){
    this.listaExp = listaExp;
  }
}

class Infixo extends Exp{
  Exp e1, e2;
  Op op;

  Infixo(Exp e1, Exp e2, Op op){
    this.e1 = e1;
    this.e2 = e2;
    this.op = op;
  }
}

class Fator extends Exp{}

class VariavelID extends Fator{
  String tokenID;

  VariavelID(String tokenID){
    this.tokenID = tokenID;
  }  
}

class ChamadaDeFuncaoExp extends Fator{
  ChamadaDeFuncao chamadaDeFuncaoExp;

  ChamadaDeFuncaoExp(String tokenID, ListaExp listaExp){
    chamadaDeFuncaoExp = new ChamadaDeFuncao(tokenID, listaExp);
  }
}

class Num extends Fator{
  float num;

  Num(float num)
  {this.num = num;}

}

class BooleanValue extends Fator{
  String trueOrFalse;

  BooleanValue(String trueOrFalse)
  {this.trueOrFalse = trueOrFalse;}
}

class Op{
  String operation;

  Op(String operation){
    this.operation = operation;
  }
} 

class Arg extends VarDecl{

  Arg(String tipo, String tokenID){
    super(tipo, tokenID);
  }
}

class Function{
  String tipo;
  String tokenID;
  ArrayList<Arg> listaArgs;
  ArrayList<VarDecl> varDecls;
  ArrayList<Comando> comandos;

  Function( String tipo, String tokenID,
            ArrayList<Arg> listaArgs,
            ArrayList<VarDecl> varDecls,
            ArrayList<Comando> comandos){
    this.tipo = tipo;
    this.tokenID = tokenID;
    this.listaArgs = listaArgs;
    this.varDecls = varDecls;
    this.comandos = comandos;
  }
}

public class Lugosi {

  public static void main(String args[]) throws Exception{

    // abrir o arquivo passado por linha
    // de comando contendo o código em Lugosi:
    FileInputStream fs = new FileInputStream(new File(args[0]));

    // Instanciar o parser da linguagem Lugosi passando
    // como argumento o arquivo contendo o código
    //Lugosi a ser processado:
    Lugosi parser = new Lugosi(fs);

    // Chamar a primeira regra do parser que irá
    // analisar o código e devolver a árvore sintática
    ArvoreLugosi arvore =parser.Lugosi();

    // passar a árvore para o gerador de código
    // que deve gerar um arquivo .java com o mesmo
    // nome do arquivo de entrada
    geraCodigo(arvore, args[0]);
}

public static void geraCodigo(ArvoreLugosi prog, String arquivo){
  StringBuilder programBuilder = new StringBuilder(1000);

  char[] arquivoChars = arquivo.toCharArray();
  arquivoChars[0] = Character.toUpperCase(arquivoChars[0]);

  StringBuilder charToString = new StringBuilder(arquivo.length());

  for (int i = 0; i < arquivoChars.length; i++){ 
            charToString.append(arquivoChars[i]); 
  } 
  arquivo = charToString.toString();

  programBuilder.append("class " + arquivo.split("\\.")[0] + "{\n");

  programBuilder.append("\tpublic static void main(String args[]){\n");

  for(var varDecl : prog.main.varDecls){
    programBuilder.append(geraVarDecl(varDecl));
  }

  programBuilder.append("\n\n");

  for(var comando : prog.main.comandos){
    geraComando(programBuilder, comando);
  }

  programBuilder.append("\t}\n");

  //gera funcoes

  for(var function : prog.functions){
    geraFunction(programBuilder, function);
  }

  programBuilder.append("}");

  System.out.println(programBuilder.toString());

  //gera arquivo de saida
  

}

public static String geraVarDecl(VarDecl varDecl){
  return "\t\t" + varDecl.tipo + " " + varDecl.tokenID + ";\n";
}

public static void geraComando(StringBuilder programBuilder, Comando comando){

  if(comando instanceof Atrib){
    programBuilder.append("\t\t");
    geraAtrib(programBuilder, (Atrib)comando);
  }

  else if(comando instanceof ChamadaDeFuncao){
    //programBuilder.append("\n");
    programBuilder.append("\t\t");
    geraChamadaDeFuncao(programBuilder, (ChamadaDeFuncao)comando);
    programBuilder.append(";\n");
  }

  else if(comando instanceof CondicionalIF){
    //programBuilder.append("\n");
    programBuilder.append("\t\t");
    programBuilder.append("if( ");
    geraCondicionalIF(programBuilder, (CondicionalIF)comando);
    programBuilder.append("\t\t}\n\n");
  }

  else if(comando instanceof LacoWhile){
    //programBuilder.append("\n");
    programBuilder.append("\t\t");
    programBuilder.append("while( ");
    geraLacoWhile(programBuilder, (LacoWhile)comando);
    programBuilder.append("\t\t}\n\n");
  }

  else if(comando instanceof LacoDoWhile){
    //programBuilder.append("\n");
    programBuilder.append("\t\t");
    programBuilder.append("do\n\t\t{\n");
    geraLacoDoWhile(programBuilder, (LacoDoWhile)comando);
    programBuilder.append("\n\n");
  }

  else if(comando instanceof Return){
    programBuilder.append("\t\t");
    geraReturn(programBuilder, (Return)comando);
  }

  else if(comando instanceof Print){
    programBuilder.append("\t\t");
    geraPrint(programBuilder, (Print)comando);
  }
}

public static void geraAtrib(StringBuilder programBuilder, Atrib atrib){
  programBuilder.append(atrib.tokenID);
  programBuilder.append(" = ");
  geraExp(programBuilder, atrib.exp);
  programBuilder.append(";\n");
}

public static void geraChamadaDeFuncao(StringBuilder programBuilder, ChamadaDeFuncao chamadaDeFuncao){
  programBuilder.append(chamadaDeFuncao.tokenID);
  programBuilder.append("( ");
  geraListaExp(programBuilder, chamadaDeFuncao.listaExp);
  programBuilder.append(" )");
}

public static void geraCondicionalIF(StringBuilder programBuilder, CondicionalIF condicionalIF){
  geraExp(programBuilder, condicionalIF.exp);
  programBuilder.append("){\n");

  for(var comando : condicionalIF.comandosEscopoIF){
    programBuilder.append("\t");
    geraComando(programBuilder, comando);
  }
}

public static void geraLacoWhile(StringBuilder programBuilder, LacoWhile lacoWhile){
  geraExp(programBuilder, lacoWhile.exp);
  programBuilder.append("){\n");

  for(var comando : lacoWhile.comandosEscopoWhile){
    programBuilder.append("\t");
    geraComando(programBuilder, comando);
  }
}

public static void geraLacoDoWhile(StringBuilder programBuilder, LacoDoWhile lacoDoWhile){
  for(var comando : lacoDoWhile.comandosEscopoDoWhile){
    programBuilder.append("\t");
    geraComando(programBuilder, comando);
  }

  programBuilder.append("\t\t}while(");
  geraExp(programBuilder, lacoDoWhile.exp);
  programBuilder.append(")\n");
}

public static void geraReturn(StringBuilder programBuilder, Return comandoReturn){
  programBuilder.append("return ");
  geraExp(programBuilder, comandoReturn.exp);
  programBuilder.append(";\n");
}

public static void geraPrint(StringBuilder programBuilder, Print print){
  //programBuilder.append("\n");
  programBuilder.append("System.out.println( ");
  geraExp(programBuilder, print.exp);
  programBuilder.append(" );\n");
}

public static void geraExp(StringBuilder programBuilder, Exp exp){

  if(exp instanceof ListaExp){
    programBuilder.append("( ");
    geraListaExp(programBuilder, (ListaExp)exp);
    programBuilder.append(")");
  }
  else if(exp instanceof Infixo){
    programBuilder.append("( ");
    geraInfixo(programBuilder, (Infixo)exp);
    programBuilder.append(" )");
  }
  else if(exp instanceof Fator){
    geraFator(programBuilder, (Fator)exp);
  }
}

public static void geraListaExp(StringBuilder programBuilder, ListaExp listaExp){
  int count = 0;

  for(var itemExp : listaExp.listaExp){
    geraExp(programBuilder, itemExp);

    ++count;

    if(count < listaExp.listaExp.size())
      programBuilder.append(", ");
  }
}

public static void geraInfixo(StringBuilder programBuilder, Infixo infixo){

  geraExp(programBuilder, infixo.e1);
  geraOp(programBuilder, infixo.op);
  geraExp(programBuilder, infixo.e2);

}

public static void geraFator(StringBuilder programBuilder, Fator fator){
  if(fator instanceof VariavelID){
    programBuilder.append(((VariavelID)fator).tokenID);
  }
  else if(fator instanceof ChamadaDeFuncaoExp){
    geraChamadaDeFuncao(programBuilder, ((ChamadaDeFuncaoExp)fator).chamadaDeFuncaoExp);
  }
  else if(fator instanceof Num){
    programBuilder.append( ((Num)fator).num );
  }
  else if(fator instanceof BooleanValue){
    programBuilder.append( ((BooleanValue)fator).trueOrFalse );
  }
}

public static void geraOp(StringBuilder programBuilder, Op op){
  programBuilder.append(" " +  op.operation + " ");
}

public static void geraFunction(StringBuilder programBuilder, Function function){
  programBuilder.append("\tpublic static " + function.tipo + " " + function.tokenID + "(");
  geraArgs(programBuilder, function.listaArgs);
  programBuilder.append("){\n");                       

  for(var varDecl : function.varDecls){
    programBuilder.append(geraVarDecl(varDecl));
  }

  programBuilder.append("\n\n");

  for(var comando : function.comandos){
    geraComando(programBuilder, comando);
  }

  programBuilder.append("\t}\n");
}

public static void geraArgs(StringBuilder programBuilder, ArrayList<Arg> listaArgs){
  int count = 0;
  
  for(var arg : listaArgs){
    programBuilder.append(arg.tipo + " " + arg.tokenID);

    ++count;
    if(count < listaArgs.size()){
      programBuilder.append(", ");
    }
  }
}

}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
}

TOKEN: 
{
  <APAREN: "(">
| <FPAREN: ")">

| <PTOVIRGULA: ";">
| <ATRIB: ":=">
| <VIRGULA: ",">

| <ADD: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">

| <AND: "&&">
| <OR: "||">

| <MENOR: "<">
| <MAIOR: ">">
| <IGUAL: "==">

| <TIPOD: "bool" | "int" | "void" | "float">

/*| <PRESV: "var" | "print" | "return" | "function" | "if" 
	| "do" | "while">*/
| <VAR: "var">
| <PRINT: "print">
| <RETURN: "return">
| <FUNCTION: "function">
| <IF: "if">
| <DO: "do">
| <WHILE: "while">

| <BVAL: "true" | "false">
}





TOKEN :
{
   <NUM : (["0"-"9"])+ ("."(["0"-"9"])+)?("E"("+"|"-")?(["0"-"9"])+)?>
 | <ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*
 ("_"(["a"-"z","A"-"Z","0"-"9"])+)*>

}



ArvoreLugosi Lugosi () :
{//Token t;
  ArrayList<VarDecl> varDecls = new ArrayList<VarDecl>();
  ArrayList<Comando> comandos = new ArrayList<Comando>();
  Main main = new Main(varDecls, comandos);
  ArrayList<Function> functions = new ArrayList<Function>();
}
{
//Syntax-directed translation Parser

  // LUGOSI -> MAIN FUNC?
  main = Main() (functions = Func(new ArrayList<Function>()))? <EOF> 

  {return new ArvoreLugosi(main, functions);}
}


//MAIN -> "main" "{" VARDECL SEQCOMANDOS "}"
Main Main () :
{ ArrayList<VarDecl> varDecls = new ArrayList<VarDecl>();
  ArrayList<Comando> comandos = new ArrayList<Comando>();}
{

  <MAIN> <ACHAVES> VarDecl(varDecls) SeqComandos(comandos) <FCHAVES> 
  {return new Main(varDecls, comandos);}
}

//VARDECL -> "var" TIPO TOKEN_id ";" VARDECL | vazio
ArrayList<VarDecl> VarDecl (ArrayList<VarDecl> varDecls) :
{Token t = null; String tipo = null; }
{
//tirar recursao a esquerda
  ("var" tipo = Tipo() t = <ID> /*VarDecl()*/ {varDecls.add(new VarDecl(tipo, t.image));}
   <PTOVIRGULA> VarDecl(varDecls))?
  {return varDecls;}
}


//TIPO -> "int" | "bool" | "float" | "void"
String Tipo () :
{Token t;}
{
  t = <TIPOD> {return t.image;}
}

//SEQCOMANDOS -> COMANDO SEQCOMANDOS | vazio
ArrayList<Comando> SeqComandos (ArrayList<Comando> comandos) :
{Comando comando;}
{
  (comando = Comando() {comandos.add(comando);} SeqComandos(comandos))?

  {return comandos;}
}

/*COMANDO -> TOKEN_id TOKEN_idL
| "if" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
| "while" "(" EXP ")" "do" "{" SEQCOMANDOS "}"
| "do" "{" SEQCOMANDOS "}" "while" "(" EXP ")"
| "return" EXP ";"
| "print" "(" EXP ")" ";"
*/
Comando Comando () :
{ Token t = null; Exp e = null; Comando c = null; Comando result = null;
  ArrayList<Comando> comandos = new ArrayList<Comando>();}
{
  t = <ID> e = TokenIDL() 
  { if(e instanceof ListaExp)
      return new ChamadaDeFuncao(t.image, (ListaExp)e);
    return new Atrib(t.image, e);}

  | "if" <APAREN> e = Exp() <FPAREN> <ACHAVES> comandos = SeqComandos(comandos) <FCHAVES> <PTOVIRGULA>
  {return new CondicionalIF(e, comandos);}

  | "while" <APAREN> e = Exp() <FPAREN> "do" <ACHAVES> comandos = SeqComandos(comandos) <FCHAVES> <PTOVIRGULA>
  {return new LacoWhile(e, comandos);} 

  | "do" <ACHAVES> comandos = SeqComandos(comandos) <FCHAVES> "while" <APAREN> e = Exp() <FPAREN> <PTOVIRGULA>
  {return new LacoDoWhile(e, comandos);}

  | "return" e = Exp() <PTOVIRGULA>
  {return new Return(e);}

  | "print" <APAREN> e = Exp() <FPAREN> <PTOVIRGULA>
  {return new Print(e);}


  /*{return result;}*/
}



//TOKEN_idL -> ":=" EXP ";" | "(" LISTAEXP? ")" ";"
Exp TokenIDL () :
{Exp e = null;}
{
  ( <ATRIB> e = Exp() <PTOVIRGULA>  
  | <APAREN> (e = ListaExp())? <FPAREN> <PTOVIRGULA>)
   

  {return e;}
}

//EXP -> "(" EXP OP EXP ")" | FATOR
Exp Exp () :
{Exp e1 = null, e2 = null, result = null; Op op = null; Fator f = null;}
{
  <APAREN> e1 = Exp() op = Op() e2 = Exp() <FPAREN> 
  {return new Infixo(e1, e2, op);} 
  | f = Fator()
  {return f;}

  /*{return result;}*/
}

/*FATOR -> TOKEN_id TOKEN_idL2 
| TOKEN_numliteral | "true" | "false"
*/
Fator Fator () :
{Token t = null;  Fator result = null;}
{
  ( t = <ID> result = TokenIDL2(t.image)
  {return result;}
  | t = <NUM> {return new Num(Float.valueOf(t.image));} 
  | t = <BVAL> {return new BooleanValue(t.image);} )

  //{return result;}
}

//TOKEN_idL2 -> "(" LISTAEXP? ")" | vazio
Fator TokenIDL2 (String tokenID) :
{ ListaExp listaExp = null;
  Fator result = null;}
{
  ( <APAREN> (listaExp = ListaExp())? <FPAREN> )?
  { if (listaExp == null)
      result = new VariavelID(tokenID);
    else
      result = new ChamadaDeFuncaoExp(tokenID, listaExp);
    return result;}
}

//OP -> "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "=="
Op Op () :
{Token t = null;Op result = null;}
{
  ( t = <ADD>     /*{return new Op(t.image);}*/ 
  | t = <SUB>     /*{return new Op(t.image);}*/ 
  | t = <MULT>    /*{return new Op(t.image);}*/ 
  | t = <DIV>     /*{return new Op(t.image);}*/
  | t = <AND>     /*{return new Op(t.image);}*/ 
  | t = <OR>      /*{return new Op(t.image);}*/
  | t = <MENOR>   /*{return new Op(t.image);}*/ 
  | t = <MAIOR>   /*{return new Op(t.image);}*/ 
  | t = <IGUAL>)  /*{return new Op(t.image);}*/

  {result = new Op(t.image);
   return result;}
  
}

//LISTAEXP -> EXP LISTAEXPL
ListaExp ListaExp () :
{ ArrayList<Exp> listaExp = new ArrayList<Exp>();
  Exp e;
  }
{
  e = Exp() {listaExp.add(e);} ListaExpL(listaExp)

  {return new ListaExp(listaExp);}
}

//LISTAEXPL -> "," EXP LISTAEXPL | vazio
void ListaExpL (ArrayList<Exp> listaExp) :
{ Exp e;}
{
  ( <VIRGULA> e = Exp() {listaExp.add(e);} ListaExpL(listaExp) )?
}

//FUNC -> "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNCL
ArrayList<Function> Func (ArrayList<Function> functions) :
{ Token t = null; String tipo = null; 
  ArrayList<Arg> listaArgs = new ArrayList<Arg>();
  ArrayList<VarDecl> varDecls = new ArrayList<VarDecl>();
  ArrayList<Comando> comandos = new ArrayList<Comando>();
}
{
  "function" tipo = Tipo() t = <ID>
  { listaArgs.add(new Arg(tipo, t.image)); }
   <APAREN> (ListaArg(listaArgs))? <FPAREN> 
  <ACHAVES> VarDecl(varDecls) SeqComandos(comandos) 
  { functions.add(new Function(tipo, t.image, listaArgs, varDecls, comandos));}
  <FCHAVES> FuncL(functions)
  {return functions;}
}

//FUNCL -> "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNCL | vazio
ArrayList<Function> FuncL (ArrayList<Function> functions) :
{ Token t = null; String tipo = null;
  ArrayList<Arg> listaArgs = new ArrayList<Arg>();
  ArrayList<VarDecl> varDecls = new ArrayList<VarDecl>();
  ArrayList<Comando> comandos = new ArrayList<Comando>();
}
{
  ( "function" tipo = Tipo() t = <ID>
  { listaArgs.add(new Arg(tipo, t.image)); }
   <APAREN> (ListaArg(listaArgs))? <FPAREN> 
  <ACHAVES> VarDecl(varDecls) SeqComandos(comandos) 
  { functions.add(new Function(tipo, t.image, listaArgs, varDecls, comandos));}
  <FCHAVES> FuncL(functions)
  )?

  {return functions;} 
}

//LISTAARG -> TIPO TOKEN_id LISTAARGL
ArrayList<Arg> ListaArg (ArrayList<Arg> listaArgs) :
{Token t = null; String tipo = null;}
{
  tipo = Tipo() t = <ID> {listaArgs.add(new Arg(tipo, t.image));} ListaArgL(listaArgs)
  {return listaArgs;}
}

//LISTAARGL -> "," TIPO TOKEN_id LISTAARGL | vazio
ArrayList<Arg> ListaArgL (ArrayList<Arg> listaArgs) :
{Token t = null; String tipo = null;}
{
  ( <VIRGULA> tipo = Tipo() t = <ID> {listaArgs.add(new Arg(tipo, t.image));} ListaArgL(listaArgs))?
  {return listaArgs;}
}











